[ 동기 vs 비동기 ] : 프로그래밍에서 작업 처리하는 방식
    동기란 ? 여러 작업이 실행될때 작업간의 실행순서를 제어 , 하나의 스레드가 동시에 접근 차단
        순처적처리, 느리다 , 데이터 무결성 중시  예] 계좌이체 : 출금/입금
    비동기란 ? 여러 작업이 실행될때 독립적으로 실행 순서 , 하나의 스레드가 동시에 접근 허용
        동시처리, 빠르다 , 무결성 보장안됨  예] 채팅
[ 비동기 통신 ]


[ fetch ]
    1. 정의 : JS에서 제공하는 내장(통신)함수
    2. 역할 : HTTP 요청을 보내고 응답을 비동기적으로 처리함수
    3. 사용법
        [ 비동기 방법 ] : then 이용한 체인 형식 , 실행순서 보장안됨
        () => {
            fetch( URL , OPTION )
                .then( response => response.json() ) R = R.json 다른문자로 해도 상관없지만 .json 앞에 있는 두개의 글자가 같아야 한다.
                .then( data => { } )
                .catch( error => { } )
        }
        [ 동기 방법 ] : async/await 이용한 동기 형식, *권장* : 실행순서 보장됨
        async () => {
            try{
                const response = await fetch( URL , OPTION );
                const data = await response.json();
            }catch( error ){
                console.log( error );
            }
        }
    4.
        - url : Spring프로젝트내 통신할 controller의 @XXXmapping 에서 정의된 URL
            주로 get/delete queryString : `url ? param1 = ${value1} & param2 = ${value}`
        - option :
            주로 get/delete : { method : "GET" } ,
            주로 post/put : { method : "POST" ,
                             headers : { "Content-Type" : "application/json" ,
                             body : JSON.stringify( data ) }

        - then( 응답객체 => 응답객체.json() ) : 응답객체를 JSON 타입으로 변환
            * then( 응답객체 => 응답객체.text()  : 응답객체를 문자 타입으로 변환
        - then( 변환된객체 => { 실행문 } ); : 통신 응답 결과
        - catch( 에러객체 => { 실행문 };    : 통신 에러 발생


